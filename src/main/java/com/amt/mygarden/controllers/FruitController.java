package com.amt.mygarden.controllers;

import com.amt.mygarden.models.Fruit;
import com.amt.mygarden.payloads.FruitRequest;
import com.amt.mygarden.repository.FruitRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/fruits") // This means URL's start with /demo (after Application path)
public class FruitController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private FruitRepository fruitRepository;

    @Autowired
    ServletContext context;

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CategoryRepository categoryRepository;

    @PostMapping("/add") // Map ONLY POST Requests
    public RedirectView  addNewFruit (@ModelAttribute Fruit fruit) throws IOException {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        final RedirectView redirectView = new RedirectView("/dashboard",true);

        for (Fruit f:fruitRepository.findAll()
             ) {
            if(f.getDescription().equals(fruit.getDescription())){
                System.out.println("Description already exists");
            }
        }

        MultipartFile file = fruit.getImageFile();
        if(file.getOriginalFilename().isEmpty()){
            fruit.setImage("placeholder.jpg");
        }
        else{
            String upload = "/usr/local/mygarden/images/";
            File dir = new File(upload + File.separator + "fruitImages"+File.separator);
            if(!dir.exists())
                dir.mkdirs();
            FileCopyUtils.copy(file.getBytes(),new File(dir.getAbsolutePath()+File.separator+fruit.getName()+file.getOriginalFilename()));
            fruit.setImage(file.getOriginalFilename());
        }

        fruitRepository.save(fruit);
        return redirectView;
    }
    @GetMapping
    public @ResponseBody Iterable<Fruit> getAllFruits() {

        // This returns a JSON or XML with the users

        return fruitRepository.findAll();
    }

    @GetMapping(path="/{id}")
    public @ResponseBody Optional<Fruit> getFruit(@PathVariable String id) {
        // This returns a JSON or XML with the users
        return fruitRepository.findById(id);
    }

    @GetMapping(path = "/category/{category}")
    public @ResponseBody Iterable<Fruit> getCategoryFruits(@PathVariable String category){
        return fruitRepository.findFruitsByCategoriesContaining(categoryRepository.findCategoryByName(category));
    }
}
