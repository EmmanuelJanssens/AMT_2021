package com.amt.mygarden.controllers;

import com.amt.mygarden.models.Fruit;
import com.amt.mygarden.models.Item;
import com.amt.mygarden.payloads.FruitRequest;
import com.amt.mygarden.repository.CategoryRepository;
import com.amt.mygarden.repository.FruitRepository;
import com.amt.mygarden.repository.ItemRepository;
import com.amt.mygarden.service.FruitService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;

import javax.servlet.ServletContext;
import java.io.IOException;
import java.util.Optional;

import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.view.RedirectView;

import java.io.IOException;

@Controller // This means that this class is a Controller
@RequestMapping(path="/fruits") // This means URL's start with /demo (after Application path)
public class FruitController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private FruitRepository fruitRepository;
    private FruitService fruitService;

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CategoryRepository categoryRepository;

    @Autowired
    private ItemRepository itemRepository;

    @Autowired
    ServletContext context;
 @PostMapping // Map ONLY POST Requests
    public RedirectView addNewFruit (@ModelAttribute Fruit fruit) throws IOException {

        final RedirectView redirectView = new RedirectView("/dashboard",true);
        fruitService.AddFruit(fruit);
        return redirectView;
    }

    @GetMapping("description/{value}")
    public ResponseEntity<Boolean> descriptionAlreadyExists(@PathVariable String value)
    {
        return ResponseEntity.ok().contentType(MediaType.APPLICATION_JSON).body( fruitService.existsByDescription(value));
    }

    @GetMapping
    public String viewFruits(Model model){

        model.addAttribute("allFruits",fruitRepository.findAll());

        return "fruits";
    }

    @GetMapping(path="/{id}")
    public String getFruit(@PathVariable String id, Model model) {
      model.addAttribute("f",fruitRepository.findById(id));
      return "fruit";
    }
    @GetMapping
    public @ResponseBody Iterable<Fruit> getAllFruits() {

        // This returns a JSON or XML with the users
        return fruitService.getAllFruits();
    }

    @GetMapping(path="/{id}")
    public @ResponseBody Fruit getFruit(@PathVariable String id) throws Exception {
        return fruitService.getASingleFruit(id);
    }
    @PostMapping(path="/{id}")
    public RedirectView addFruitToCart (@PathVariable String id,@ModelAttribute String fruitAmount) throws IOException {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        final RedirectView redirectView = new RedirectView("/", true);

        Optional<Item> it=itemRepository.findUserFruitAndKart("admin",fruitRepository.findById(id).get());
        if(it.isPresent()){
           Item item1=it.get();
            item1.addSeveralFruit(Integer.valueOf(fruitAmount));
            itemRepository.save(item1);

        }else {
            Item item=new Item("admin",fruitRepository.findById(id).get(), Integer.valueOf(fruitAmount));
            itemRepository.save(item);
        }

        return redirectView;
    }
    @GetMapping(path = "/category/{category}")
    public @ResponseBody Iterable<Fruit> getCategoryFruits(@PathVariable String category){
        return fruitService.getFruitsByCategory(category);
    }
}
